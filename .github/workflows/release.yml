name: Build and Release FileCollector

env:
  MAJOR_MINOR_VERSION: "1.0" # Define base major.minor version

on:
  push:
    branches:
      - master

jobs:
  build:
    name: Build for ${{ matrix.os-name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            os-name: Windows
            rid: win-x64
            artifact-name-suffix: win-x64
            output-archive-name: FileCollector-win-x64.zip
          - os: macos-latest
            os-name: macOS
            rid: osx-x64
            artifact-name-suffix: osx-x64
            output-archive-name: FileCollector-osx-x64.tar.gz
          - os: ubuntu-latest
            os-name: Linux
            rid: linux-x64
            artifact-name-suffix: linux-x64
            output-archive-name: FileCollector-linux-x64.tar.gz

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Determine Application Version
        id: versioner
        run: |
          $AppVersion = "${{ env.MAJOR_MINOR_VERSION }}.${{ github.run_number }}.${{ github.run_attempt }}"
          echo "Determined application version: $AppVersion"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "app_version=$AppVersion"
        shell: pwsh

      - name: Restore dependencies
        run: dotnet restore FileCollector/FileCollector.csproj

      - name: Publish application
        run: |
          echo "Publishing application version: ${{ steps.versioner.outputs.app_version }}"
          dotnet publish FileCollector/FileCollector.csproj -c Release -r ${{ matrix.rid }} --self-contained true /p:PublishSingleFile=false /p:DebugType=None /p:PublishTrimmed=false /p:PublishReadyToRun=false /p:Version=${{ steps.versioner.outputs.app_version }} /p:InformationalVersion=${{ steps.versioner.outputs.app_version }} -o ./publish_output
        shell: pwsh # Explicitly use pwsh for consistency, especially with multi-line scripts

      - name: List publish_output contents (Diagnostics)
        if: runner.os == 'Windows'
        run: Get-ChildItem -Path ./publish_output -Recurse | Select-Object FullName, Length, Mode, LastWriteTime
        shell: pwsh
      
      - name: List publish_output contents (Diagnostics)
        if: runner.os != 'Windows'
        run: ls -lR ./publish_output
        shell: bash

      - name: Archive output (Windows)
        if: matrix.os == 'windows-latest'
        run: Compress-Archive -Path ./publish_output/* -DestinationPath ./${{ matrix.output-archive-name }}
        shell: pwsh

      - name: Archive output (macOS/Linux)
        if: matrix.os == 'macos-latest' || matrix.os == 'ubuntu-latest'
        run: tar -czvf ./${{ matrix.output-archive-name }} -C ./publish_output .
        shell: bash # tar is a bash command

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: FileCollector-${{ matrix.artifact-name-suffix }}
          path: ./${{ matrix.output-archive-name }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest # This job uses bash by default
    needs: build
    permissions:
      contents: write

    steps:
      - name: Generate Release Info
        id: release_info
        run: |
          APP_VERSION="${{ env.MAJOR_MINOR_VERSION }}.${{ github.run_number }}.${{ github.run_attempt }}"
          echo "tag_name=v${APP_VERSION}" >> $GITHUB_OUTPUT
          echo "app_version_for_display=${APP_VERSION}" >> $GITHUB_OUTPUT
          echo "release_name=Release v${APP_VERSION}" >> $GITHUB_OUTPUT
        # shell: bash # Default on ubuntu-latest

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        # No 'name' is specified, so all artifacts from this workflow run are downloaded.
        # Each artifact will be in a subdirectory named after the artifact.

      - name: List downloaded files (for verification)
        run: ls -R .
        # shell: bash # Default on ubuntu-latest

      - name: Create Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release_info.outputs.tag_name }}
          name: ${{ steps.release_info.outputs.release_name }}
          body: |
            Automated release for commit ${{ github.sha }}.
            Application version: ${{ steps.release_info.outputs.app_version_for_display }}
            Builds for Windows, macOS, and Linux are attached.
          draft: false
          prerelease: false
          files: |
            ./FileCollector-win-x64/FileCollector-win-x64.zip
            ./FileCollector-osx-x64/FileCollector-osx-x64.tar.gz
            ./FileCollector-linux-x64/FileCollector-linux-x64.tar.gz