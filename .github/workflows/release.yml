name: Build and Release FileCollector

on:
  push:
    tags:
      - 'v*.*.*' # Trigger on version tags like v1.0.0, v1.2.3

permissions:
  contents: write # Required to create releases, upload assets, and delete existing releases

jobs:
  build:
    name: Build for ${{ matrix.os_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            os_name: Windows
            rid: win-x64
            asset_name_suffix: win-x64
            output_executable_name: FileCollector.exe
          - os: ubuntu-latest
            os_name: Linux
            rid: linux-x64
            asset_name_suffix: linux-x64
            output_executable_name: FileCollector
          - os: macos-latest
            os_name: macOS (x64)
            rid: osx-x64
            asset_name_suffix: osx-x64
            output_executable_name: FileCollector
          # Optional: Add osx-arm64 for Apple Silicon
          # - os: macos-14
          #   os_name: macOS (ARM64)
          #   rid: osx-arm64
          #   asset_name_suffix: osx-arm64
          #   output_executable_name: FileCollector

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore FileCollector/FileCollector.csproj

      - name: Publish application
        run: dotnet publish FileCollector/FileCollector.csproj -c Release -r ${{ matrix.rid }} --self-contained true -p:PublishSingleFile=true -o ./publish_output

      - name: Archive release artifacts (Windows)
        if: runner.os == 'Windows'
        run: Compress-Archive -Path ./publish_output/* -DestinationPath ./FileCollector-${{ github.ref_name }}-${{ matrix.asset_name_suffix }}.zip
        shell: pwsh

      - name: Archive release artifacts (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cd ./publish_output
          zip -r ../FileCollector-${{ github.ref_name }}-${{ matrix.asset_name_suffix }}.zip .
          cd ..

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: FileCollector-${{ matrix.asset_name_suffix }}
          path: ./FileCollector-${{ github.ref_name }}-${{ matrix.asset_name_suffix }}.zip

  create_release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts # All artifacts will be downloaded to the 'artifacts' directory

      - name: Delete existing release to avoid conflict
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ github.ref_name }}
        run: |
          echo "Listing existing releases (if any) for tag ${{ env.TAG }}..."
          gh release view "${{ env.TAG }}" && (gh release delete "${{ env.TAG }}" --yes && echo "Deleted existing release for tag ${{ env.TAG }}") || echo "No existing release found for tag ${{ env.TAG }}, or an error occurred trying to view/delete it."
          # The above command attempts to view, and if successful (exit code 0), deletes.
          # If view fails (release not found), it prints the "No existing release found" message.
          # This makes the delete attempt conditional on the release existing.

      - name: Create Release using GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ github.ref_name }}
        run: |
          gh release create "$TAG" \
            --title "Release $TAG" \
            --notes "Release of FileCollector version $TAG.
            Download the appropriate package for your operating system below." \
            --draft=false \
            --prerelease=false
          echo "Release $TAG created."

      - name: Upload Release Assets using GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ github.ref_name }}
        run: |
          echo "Uploading Windows asset..."
          gh release upload "$TAG" ./artifacts/FileCollector-win-x64/FileCollector-${{ env.TAG }}-win-x64.zip --clobber
          echo "Uploading Linux asset..."
          gh release upload "$TAG" ./artifacts/FileCollector-linux-x64/FileCollector-${{ env.TAG }}-linux-x64.zip --clobber
          echo "Uploading macOS (x64) asset..."
          gh release upload "$TAG" ./artifacts/FileCollector-osx-x64/FileCollector-${{ env.TAG }}-osx-x64.zip --clobber
          # Optional: Add osx-arm64 asset upload
          # if [ -f "./artifacts/FileCollector-osx-arm64/FileCollector-${{ env.TAG }}-osx-arm64.zip" ]; then
          #   echo "Uploading macOS (ARM64) asset..."
          #   gh release upload "$TAG" ./artifacts/FileCollector-osx-arm64/FileCollector-${{ env.TAG }}-osx-arm64.zip --clobber
          # fi
          echo "All assets uploaded."