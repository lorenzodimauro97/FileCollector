@page "/settings"
@inject SettingsService SettingsSvc
@inject ILogger<Settings> Logger

<div class="page-settings-container">
    <h3 class="mb-4">Application Settings</h3>
    <div class="settings-grid">
        <div class="settings-panel">
            <h4 class="panel-title">Ignore Patterns</h4>
            <p class="text-muted">Manage files and folders to ignore. Patterns follow .gitignore syntax (e.g., <code>node_modules/</code>,
                <code>*.log</code>, <code>temp/</code>).</p>

            @if (_appSettings == null)
            {
                <p><em>Loading settings...</em></p>
            }
            else
            {
                @if (!_appSettings.IgnorePatterns.Any())
                {
                    <p class="text-muted"><em>No ignore patterns defined.</em></p>
                }
                else
                {
                    <ul class="list-group mb-3">
                        @foreach (var pattern in _appSettings.IgnorePatterns)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <code>@pattern</code>
                                <button class="btn btn-sm btn-subtle-danger" @onclick="() => RemovePattern(pattern)">
                                    <TablerIcon OutlineIcon="TablerIconOutlineName.Trash" Size="16px"/>
                                    Remove
                                </button>
                            </li>
                        }
                    </ul>
                }

                <div class="input-group mb-3">
                    <input type="text" class="form-control" @bind="_newPattern"
                           placeholder="Add new pattern (e.g., bin/ or *.tmp)" @onkeyup="HandleInputKeyUp"/>
                    <button class="btn btn-light" @onclick="AddPattern"
                            disabled="@string.IsNullOrWhiteSpace(_newPattern)">
                        <TablerIcon OutlineIcon="TablerIconOutlineName.Plus"/>
                        Add
                    </button>
                </div>

                <h5 class="mt-4">Import from .gitignore</h5>
                <p class="text-muted">Paste the content of a .gitignore file below or upload one.</p>

                <div class="mb-3">
                    <label for="gitignoreContent" class="form-label">Paste .gitignore content:</label>
                    <textarea id="gitignoreContent" class="form-control" rows="5"
                              @bind="_gitIgnoreContentInput"></textarea>
                </div>
                <div class="mb-3">
                    <label for="fileUpload" class="form-label">Or upload .gitignore file:</label>
                    <InputFile id="fileUpload" OnChange="HandleFileSelected" class="form-control"
                               accept=".gitignore, .txt"/>
                </div>
                <button class="btn btn-light" @onclick="ImportGitIgnore"
                        disabled="@(string.IsNullOrWhiteSpace(_gitIgnoreContentInput) && _loadedFileContent == null)">
                    <TablerIcon OutlineIcon="TablerIconOutlineName.Download"/>
                    Import Patterns
                </button>
            }
        </div>

        <div class="settings-panel">
            <h4 class="panel-title">Prompts</h4>
            <p class="text-muted">Define pre-prompt and post-prompt content that will be included with the merged
                files.</p>
            @if (_appSettings == null)
            {
                <p><em>Loading settings...</em></p>
            }
            else
            {
                <div class="mb-3">
                    <label for="prePrompt" class="form-label">Pre-Prompt:</label>
                    <textarea id="prePrompt" class="form-control" rows="5" @bind="_appSettings.PrePrompt"
                              placeholder="Content to appear before any files..."></textarea>
                </div>
                <div class="mb-3">
                    <label for="postPrompt" class="form-label">Post-Prompt:</label>
                    <textarea id="postPrompt" class="form-control" rows="5" @bind="_appSettings.PostPrompt"
                              placeholder="Content to appear after all files (but before the non-persistent user prompt)..."></textarea>
                </div>
            }
        </div>
    </div>

    @if (!string.IsNullOrEmpty(_statusMessage))
    {
        <div class="alert @(_statusSuccess ? "alert-success" : "alert-warning") mt-4 py-2 px-3" role="alert">
            @_statusMessage
        </div>
    }

    <div class="mt-4">
        <button class="btn btn-primary btn-lg" @onclick="SaveAllSettingsAsync" disabled="@(_appSettings == null)">
            <TablerIcon OutlineIcon="TablerIconOutlineName.DeviceFloppy" Class="me-1"/>
            Save All Settings
        </button>
    </div>
</div>

@code {
    private AppSettings? _appSettings;
    private string _newPattern = string.Empty;
    private string _gitIgnoreContentInput = string.Empty;
    private string _statusMessage = string.Empty;
    private bool _statusSuccess;
    private IBrowserFile? _selectedFile;
    private string? _loadedFileContent;

    protected override async Task OnInitializedAsync()
    {
        _appSettings = await SettingsSvc.GetAppSettingsAsync();
    }

    private void AddPattern()
    {
        if (string.IsNullOrWhiteSpace(_newPattern) || _appSettings?.IgnorePatterns.Contains(_newPattern.Trim()) == true)
        {
            if (_appSettings?.IgnorePatterns.Contains(_newPattern.Trim()) == true)
            {
                SetStatusMessage($"Pattern '{_newPattern.Trim()}' already exists.", false);
            }

            return;
        }

        _appSettings?.IgnorePatterns.Add(_newPattern.Trim());
        _newPattern = string.Empty;
        SetStatusMessage("Pattern added to list. Save settings to persist.", true);
    }

    private async Task HandleInputKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            AddPattern();
        }
    }

    private void RemovePattern(string pattern)
    {
        _appSettings?.IgnorePatterns.Remove(pattern);
        SetStatusMessage($"Pattern '{pattern}' removed from list. Save settings to persist.", true);
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        _selectedFile = e.File;
        if (_selectedFile != null)
        {
            const long maxFileSize = 1024 * 1024; // 1MB
            try
            {
                using var streamReader = new StreamReader(_selectedFile.OpenReadStream(maxFileSize));
                _loadedFileContent = await streamReader.ReadToEndAsync();
                _gitIgnoreContentInput = _loadedFileContent; // Also populate textarea for visibility
                SetStatusMessage($"File '{_selectedFile.Name}' loaded. Ready to import. Save settings to persist changes.", true);
            }
            catch (IOException ex)
            {
                Logger.LogError(ex, "Error reading file or file too large.");
                SetStatusMessage($"Error reading file '{_selectedFile.Name}': {ex.Message}. Max size: {maxFileSize / (1024 * 1024)}MB", false);
                _loadedFileContent = null;
                _gitIgnoreContentInput = string.Empty;
            }
        }
        else
        {
            _loadedFileContent = null;
        }

        StateHasChanged();
    }

    private void ImportGitIgnore()
    {
        var contentToParse = !string.IsNullOrWhiteSpace(_gitIgnoreContentInput) ? _gitIgnoreContentInput : _loadedFileContent;

        if (string.IsNullOrWhiteSpace(contentToParse))
        {
            SetStatusMessage("No content to import.", false);
            return;
        }

        var lines = contentToParse.Split(['\r', '\n'], StringSplitOptions.RemoveEmptyEntries)
            .Select(line => line.Trim())
            .Where(line => !string.IsNullOrWhiteSpace(line) && !line.StartsWith("#"))
            .ToList();

        var newPatternsAdded = 0;
        var patternsSkipped = 0;

        foreach (var line in lines)
        {
            if (_appSettings?.IgnorePatterns.Contains(line) == false)
            {
                _appSettings?.IgnorePatterns.Add(line);
                newPatternsAdded++;
            }
            else
            {
                patternsSkipped++;
            }
        }

        if (newPatternsAdded > 0)
        {
            SetStatusMessage($"Import successful. Added {newPatternsAdded} new patterns. Skipped {patternsSkipped} duplicates. Save settings to persist.", true);
        }
        else if (patternsSkipped > 0 && newPatternsAdded == 0)
        {
            SetStatusMessage($"No new patterns to add from import. Skipped {patternsSkipped} duplicates.", false);
        }
        else
        {
            SetStatusMessage("No valid patterns found to import.", false);
        }

        _gitIgnoreContentInput = string.Empty;
        _loadedFileContent = null;
        _selectedFile = null; // Clear the file input
    }

    private async Task SaveAllSettingsAsync()
    {
        if (_appSettings == null)
        {
            SetStatusMessage("Settings not loaded, cannot save.", false);
            return;
        }

        await SettingsSvc.SaveAppSettingsAsync(_appSettings);
        SetStatusMessage("All settings saved successfully.", true);
        await OnInitializedAsync(); // Refresh settings from service
    }

    private void SetStatusMessage(string message, bool success)
    {
        _statusMessage = message;
        _statusSuccess = success;
    }
}