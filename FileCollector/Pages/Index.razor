@page "/"
@implements IAsyncDisposable
@inject SettingsService SettingsService
@inject NavigationStateService NavStateService
@inject IJSRuntime JsRuntime
@inject ILogger<Index> Logger
@inject Func<Photino.NET.PhotinoWindow> MainWindowFactory
@inject FileTreeService FileTreeSvc
@inject ContentMergingService ContentMergerSvc

<PageTitle>File Collector</PageTitle>

<div class="page-layout">
    <div class="left-panel">
        <div class="panel-section">
            <button class="btn btn-primary btn-full-width" @onclick="SelectFolderAndLoadTreeAsync"
                    disabled="@_isLoading">
                <TablerIcon OutlineIcon="@TablerIconOutlineName.FolderOpen" Class="me-1" Size="18px"/>
                Select Root Folder
            </button>
            @if (!string.IsNullOrEmpty(_currentDisplayRootPath))
            {
                <p class="mt-2 mb-0 text-muted small">Current: <strong
                        title="@_currentDisplayRootPath">@_currentDisplayRootPath.Shorten(80)</strong></p>
            }
        </div>
        @if (_isLoading && string.IsNullOrEmpty(_currentDisplayRootPath))
        {
            <div class="panel-section">
                <div class="alert alert-info mt-3" role="alert">
                    <div class="d-flex align-items-center">
                        <div class="spinner-border spinner-border-sm me-2" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <div>
                            <strong>Loading...</strong>
                            @if (!string.IsNullOrEmpty(_loadingMessage))
                            {
                                <div class="small">@_loadingMessage</div>
                            }
                            else
                            {
                                <div class="small">Please wait.</div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
        else if (!string.IsNullOrEmpty(_loadingMessage) && _loadingMessage.StartsWith("Error"))
        {
            <div class="panel-section">
                <div class="alert alert-danger mt-3" role="alert">
                    @_loadingMessage
                </div>
            </div>
        }
        else if (!string.IsNullOrEmpty(_loadingMessage))
        {
            <div class="panel-section">
                <div class="alert alert-warning mt-3" role="alert">
                    @_loadingMessage
                </div>
            </div>
        }
        @if (!_isLoading || !string.IsNullOrEmpty(_currentDisplayRootPath))
        {
            <div class="panel-section">
                <h4 class="panel-title">File System</h4>
                <div class="file-tree-container scrollable-area">
                    <FileTreeDisplay DisplayRootItems="DisplayRootItems"
                                     SelectedFilePaths="_selectedFilePaths"
                                     IsLoadingTree="_isLoadingTree"
                                     CurrentDisplayRootPath="@_currentDisplayRootPath"
                                     LoadingMessage="@_loadingMessage"
                                     OnSelectionChanged="HandleSelectionChangedAsync"/>
                </div>
            </div>
            <div class="panel-section">
                <h4 class="panel-title">Search Files</h4>
                <SearchPanel SearchTerm="@_searchTerm"
                             IsLoadingOrLoadingTree="@(_isLoading || _isLoadingTree)"
                             CurrentDisplayRootPath="@_currentDisplayRootPath"
                             IsPerformingSearch="_isPerformingSearch"
                             SearchResults="_searchResults"
                             HasTrueRootItems="@_trueRootItems.Any()"
                             OnSearchInput="HandleSearchInputAsync"
                             OnClearSearch="ClearSearchAsync"
                             OnSearchResultSelectionChanged="HandleSearchResultSelectionAsync"/>
            </div>
            <div class="panel-section">
                <h4 class="panel-title">
                    Selected Files (@SelectedFileDisplayItems.Count)
                </h4>
                <SelectedFilesPanel SelectedFileDisplayItems="SelectedFileDisplayItems"
                                    IsLoading="_isLoading"
                                    OnClearAllSelectionsClicked="ClearAllSelectionsAsync"
                                    OnRemoveFileClicked="HandleRemoveFileAsync"/>
            </div>
            <div class="panel-section">
                <h4 class="panel-title">Saved Contexts</h4>
                <ContextManagementPanel CurrentDisplayRootPath="@_currentDisplayRootPath"
                                        IsLoading="_isLoading"
                                        AppSettings="_appSettings"
                                        CanSaveContext="@(_selectedFilePaths.Count(p => GetNodeByPath(p) is { IsDirectory: false }) > 0)"
                                        ContextStatusMessage="@_contextStatusMessage"
                                        ContextStatusIsError="_contextStatusIsError"
                                        OnSaveContext="HandleSaveContextAsync"
                                        OnLoadContext="HandleLoadContextFromPanelAsync"
                                        OnDeleteContext="HandleDeleteContextAsync"
                                        @ref="_contextManagementPanelRef"/>
            </div>
        }
    </div>

    <div class="right-panel">
        <div class="content-actions-area">
            <MergedContentControls IsMergingContent="_isMergingContent"
                                   MergedContentTokenCount="_mergedContentTokenCount"
                                   CanGenerateOrCopy="@(!string.IsNullOrEmpty(_mergedFileContentPlainText) || _includeFileTreeInOutput || _privatizeDataInOutput)"
                                   MergeErrorMessage="@_mergeErrorMessage"
                                   UserPromptValue="@_userPrompt"
                                   IncludeFileTreeInOutput="_includeFileTreeInOutput"
                                   PrivatizeDataInOutput="_privatizeDataInOutput"
                                   CurrentDisplayRootPath="@_currentDisplayRootPath"
                                   IsAutoRefreshEnabled="_isAutoRefreshEnabled"
                                   OnGenerateMergedContentClicked="GenerateMergedContentAsync"
                                   OnCopyMergedContentToClipboardClicked="CopyMergedContentToClipboardAsync"
                                   OnUserPromptInputChanged="HandleUserPromptInput"
                                   OnClearUserPromptClicked="ClearUserPromptAndRefresh"
                                   OnIncludeFileTreeInOutputChanged="HandleIncludeFileTreeInOutputChangedAsync"
                                   OnPrivatizeDataInOutputChanged="HandlePrivatizeDataInOutputChangedAsync"
                                   OnAutoRefreshEnabledChanged="HandleAutoRefreshEnabledChangedAsync"/>
        </div>

        <div class="merged-content-viewer scrollable-area">
            <MergedContentViewer MergedFilesToDisplay="_mergedFilesToDisplay"
                                 IsMergingContent="_isMergingContent"
                                 SelectedActualFilesCount="@(_selectedFilePaths.Count(p => GetNodeByPath(p) is { IsDirectory: false }))"/>
        </div>
    </div>
</div>

@code {
    private List<FileSystemItem> _trueRootItems = [];
    private List<FileSystemItem> DisplayRootItems { get; set; } = [];
    private readonly List<string> _selectedFilePaths = [];
    private string? _currentDisplayRootPath;

    private bool _isLoading;
    private bool _isLoadingTree;
    private string _loadingMessage = "";

    private List<MergedFileDisplayItem> _mergedFilesToDisplay = [];
    private string _mergedFileContentPlainText = "";
    private int _mergedContentTokenCount;
    private bool _isMergingContent;
    private string _mergeErrorMessage = "";

    private string _userPrompt = "";
    private Timer? _userPromptDebounceTimer;
    private readonly TimeSpan _debounceTime = TimeSpan.FromMilliseconds(500);
    private bool _includeFileTreeInOutput;
    private bool _privatizeDataInOutput;
    private bool _isAutoRefreshEnabled = true;

    private AppSettings? _appSettings;
    private string _contextStatusMessage = "";
    private bool _contextStatusIsError;
    private ContextManagementPanel _contextManagementPanelRef = null!;


    private string _searchTerm = "";
    private List<FileSystemItem> _searchResults = [];
    private Timer? _searchDebounceTimer;
    private readonly TimeSpan _searchDebounceTime = TimeSpan.FromMilliseconds(300);
    private bool _isPerformingSearch;

    private List<MergedFileDisplayItem> SelectedFileDisplayItems => _mergedFilesToDisplay
        .Where(item => !item.FilePath.StartsWith("SYSTEM_", StringComparison.OrdinalIgnoreCase) && item.ErrorMessage is null)
        .OrderByDescending(item => item.TokenCount)
        .ThenBy(item => item.FilePath)
        .ToList();

    protected override async Task OnInitializedAsync()
    {
        _appSettings = await SettingsService.GetAppSettingsAsync();
        _includeFileTreeInOutput = false; // Default session value
        _privatizeDataInOutput = _appSettings.PrivatizeDataInOutput; // Initialize from persisted settings

        var persistedState = NavStateService.ConsumePersistedState();

        if (persistedState?.RootPath != null)
        {
            _currentDisplayRootPath = persistedState.RootPath;
            await LoadFileTreeAsync(_currentDisplayRootPath);

            if ((_trueRootItems.Any() || DisplayRootItems.Any()) && persistedState.SelectedFilePaths.Any())
            {
                await RestoreFileSelectionsAsync(persistedState.SelectedFilePaths);
                await GenerateMergedContentAsync();
            }
            else if (string.IsNullOrEmpty(_currentDisplayRootPath))
            {
                await GenerateMergedContentAsync();
            }
        }
    }

    private async Task SelectFolderAndLoadTreeAsync()
    {
        _isLoading = true;
        _loadingMessage = "Waiting for folder selection...";
        _contextStatusMessage = "";
        await InvokeAsync(StateHasChanged);

        var photinoWindow = MainWindowFactory();
        if (photinoWindow == null)
        {
            Logger.LogError("PhotinoWindow instance is not available. Cannot open folder dialog.");
            _loadingMessage = "Error: Could not access window features to open folder dialog.";
            _isLoading = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        string[]? folderPathArray = await photinoWindow.ShowOpenFolderAsync("Select Root Folder");
        _isLoading = false;
        _loadingMessage = "";

        if (folderPathArray is { Length: > 0 } && !string.IsNullOrEmpty(folderPathArray[0]))
        {
            var selectedPath = folderPathArray[0];
            Logger.LogInformation("User selected folder: {SelectedPath}", selectedPath);

            if (_currentDisplayRootPath != selectedPath)
            {
                await ClearAllSelectionsAsync();
                _currentDisplayRootPath = selectedPath;
                await ClearSearchAsync();
                await LoadFileTreeAsync(selectedPath);
                await GenerateMergedContentAsync();
            }
            else
            {
                await LoadFileTreeAsync(selectedPath);
            }
        }
        else
        {
            Logger.LogInformation("Folder selection was cancelled or no folder was returned.");
            if (string.IsNullOrEmpty(_currentDisplayRootPath))
            {
                _loadingMessage = "";
                DisplayRootItems.Clear();
                _trueRootItems.Clear();
                await ClearSearchAsync();
            }
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadFileTreeAsync(string? rootPath)
    {
        _isLoadingTree = true;
        _loadingMessage = "Preparing to load file tree...";
        _contextStatusMessage = "";
        _trueRootItems = [];
        DisplayRootItems = [];
        _selectedFilePaths.Clear();
        _currentDisplayRootPath = rootPath;
        await ClearSearchAsync();

        _mergedFilesToDisplay.Clear();
        _mergedFileContentPlainText = "";
        _mergedContentTokenCount = 0;
        _mergeErrorMessage = "";

        await InvokeAsync(StateHasChanged);

        if (string.IsNullOrEmpty(rootPath))
        {
            Logger.LogInformation("Root path is not set or cleared. File tree is empty.");
            _isLoadingTree = false;
            _loadingMessage = "";
            await InvokeAsync(StateHasChanged);
            return;
        }

        FileTreeService.FileTreeLoadResult? result = null;
        try
        {
            _appSettings ??= await SettingsService.GetAppSettingsAsync();
            async Task ReportProgressAction(string newProgressMessage)
            {
                await InvokeAsync(() =>
                {
                    _loadingMessage = newProgressMessage;
                    StateHasChanged();
                });
            }
            result = await FileTreeSvc.LoadTreeAsync(rootPath, _appSettings.IgnorePatterns, ReportProgressAction);
            if (result.IsError)
            {
                _loadingMessage = result.Message;
                Logger.LogError("Error loading file tree: {ErrorMessage}", result.Message);
            }
            else
            {
                _trueRootItems = result.TrueRootItems;
                DisplayRootItems = result.DisplayRootItems;
                _loadingMessage = result.Message;
                if (string.IsNullOrEmpty(_loadingMessage) && !DisplayRootItems.Any() && !string.IsNullOrEmpty(rootPath))
                {
                    _loadingMessage = "No displayable files or folders found in the selected directory after processing.";
                }
            }
        }
        catch (Exception ex)
        {
            _loadingMessage = $"Error: {ex.Message.Shorten(150)}";
            Logger.LogError(ex, "Unhandled error in LoadFileTreeAsync for path {RootPath}", rootPath);
            _trueRootItems = [];
            DisplayRootItems = [];
        }
        finally
        {
            _isLoadingTree = false;
            if (DisplayRootItems.Any() && !string.IsNullOrEmpty(_loadingMessage) && result != null && !result.IsError && !_loadingMessage.Contains("No items") && !_loadingMessage.Contains("No displayable"))
            {
                _loadingMessage = "";
            }
            else if (string.IsNullOrEmpty(_currentDisplayRootPath))
            {
                _loadingMessage = "";
            }
            await InvokeAsync(StateHasChanged);
        }
    }

    private Task RestoreFileSelectionsAsync(List<string> pathsToSelect)
    {
        foreach (var trueRootItem in _trueRootItems) DeselectNodeAndChildrenRecursive(trueRootItem);
        _selectedFilePaths.Clear();

        if (!_trueRootItems.Any() && !DisplayRootItems.Any()) return Task.CompletedTask;

        foreach (var path in pathsToSelect)
        {
            var node = GetNodeByPath(path);
            if (node is { IsDirectory: false })
            {
                node.SetSelectionStatus(true, _selectedFilePaths);
                node.UpdateParentSelectionStatus(_selectedFilePaths);
            }
        }
        return Task.CompletedTask;
    }

    private async Task HandleSelectionChangedAsync(FileSystemItem changedItem)
    {
        _contextStatusMessage = "";
        await GenerateMergedContentAsync();
        StateHasChanged(); 
    }

    private async Task ClearUserPromptAndRefresh()
    {
        _userPrompt = "";
        if (_userPromptDebounceTimer != null)
        {
            await _userPromptDebounceTimer.DisposeAsync();
            _userPromptDebounceTimer = null;
        }
        await GenerateMergedContentAsync();
    }

    private async Task HandleUserPromptInput(ChangeEventArgs e)
    {
        _userPrompt = e.Value?.ToString() ?? "";
        if (_isAutoRefreshEnabled)
        {
            _userPromptDebounceTimer?.Change(_debounceTime, Timeout.InfiniteTimeSpan);
            _userPromptDebounceTimer ??= new Timer(DebouncedUserPromptAction, null, _debounceTime, Timeout.InfiniteTimeSpan);
        }
    }
    
    private async Task HandleAutoRefreshEnabledChangedAsync(bool newValue)
    {
        _isAutoRefreshEnabled = newValue;
        if (_isAutoRefreshEnabled)
        {
            await GenerateMergedContentAsync();
        }
    }

    private async Task HandleIncludeFileTreeInOutputChangedAsync(bool newValue)
    {
        _includeFileTreeInOutput = newValue;
        await GenerateMergedContentAsync();
    }

    private async Task HandlePrivatizeDataInOutputChangedAsync(bool newValue)
    {
        _privatizeDataInOutput = newValue;
        await GenerateMergedContentAsync();
    }

    private async void DebouncedUserPromptAction(object? state)
    {
        if (!_isAutoRefreshEnabled) return;
        try { await InvokeAsync(GenerateMergedContentAsync); }
        catch (ObjectDisposedException) { Logger.LogDebug("DebouncedUserPromptAction skipped: component disposed."); }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in DebouncedUserPromptAction.");
            await InvokeAsync(() =>
            {
                if (string.IsNullOrEmpty(_mergeErrorMessage)) _mergeErrorMessage = "Error processing input.";
                _isMergingContent = false;
                StateHasChanged();
            });
        }
    }

    private async Task ClearAllSelectionsAsync()
    {
        foreach (var trueRootItem in _trueRootItems) DeselectNodeAndChildrenRecursive(trueRootItem);
        _selectedFilePaths.Clear();
        _mergedFilesToDisplay.Clear();
        _mergedFileContentPlainText = "";
        _mergedContentTokenCount = 0;
        _mergeErrorMessage = "";
        _isMergingContent = false;
        _contextStatusMessage = "";
        await InvokeAsync(StateHasChanged);
        await GenerateMergedContentAsync();
    }
    
    private async Task HandleRemoveFileAsync(string filePath)
    {
        _contextStatusMessage = "";
        var nodeToRemove = GetNodeByPath(filePath);
        if (nodeToRemove != null)
        {
            nodeToRemove.SetSelectionStatus(false, _selectedFilePaths);
            nodeToRemove.UpdateParentSelectionStatus(_selectedFilePaths);
            await GenerateMergedContentAsync();
        }
    }

    private static void DeselectNodeAndChildrenRecursive(FileSystemItem node)
    {
        node.IsSelected = false;
        node.IsPartiallySelected = false;
        if (node.IsDirectory) foreach (var child in node.Children) DeselectNodeAndChildrenRecursive(child);
    }

    private FileSystemItem? GetNodeByPath(string fullPath) =>
        _trueRootItems.Select(trueRootItem => FindNodeRecursive(trueRootItem, fullPath)).FirstOrDefault(foundNode => foundNode != null);

    private static FileSystemItem? FindNodeRecursive(FileSystemItem currentNode, string targetFullPath)
    {
        if (string.Equals(currentNode.FullPath, targetFullPath, StringComparison.OrdinalIgnoreCase)) return currentNode;
        if (!currentNode.IsDirectory) return null;
        return currentNode.Children.Select(child => FindNodeRecursive(child, targetFullPath)).FirstOrDefault(foundInChild => foundInChild != null);
    }

    private async Task GenerateMergedContentAsync()
    {
        _isMergingContent = true;
        _mergeErrorMessage = "";
        _mergedFilesToDisplay.Clear();
        await InvokeAsync(StateHasChanged);
        _appSettings ??= await SettingsService.GetAppSettingsAsync();
        var filesToMerge = _selectedFilePaths.Select(GetNodeByPath).Where(node => node is { IsDirectory: false }).OfType<FileSystemItem>().OrderBy(node => node.FullPath).ToList();
        
        if (!filesToMerge.Any() && 
            string.IsNullOrWhiteSpace(_appSettings.PrePrompt) && 
            string.IsNullOrWhiteSpace(_userPrompt) && 
            string.IsNullOrWhiteSpace(_appSettings.PostPrompt) &&
            !_includeFileTreeInOutput &&
            !_privatizeDataInOutput) // Check _privatizeDataInOutput as well, though it usually implies files
        {
            _mergedFileContentPlainText = "";
            _mergedContentTokenCount = 0;
            _isMergingContent = false;
            await InvokeAsync(StateHasChanged);
            return;
        }
        var result = await ContentMergerSvc.GenerateMergedContentAsync(
            filesToMerge, 
            _appSettings, 
            _userPrompt, 
            _currentDisplayRootPath,
            _includeFileTreeInOutput,
            _privatizeDataInOutput, // Pass the new flag
            DisplayRootItems); 
            
        _mergedFilesToDisplay = result.MergedFilesToDisplay;
        _mergedFileContentPlainText = result.MergedFileContentPlainText;
        _mergedContentTokenCount = result.EstimatedTokenCount;
        _mergeErrorMessage = result.ErrorMessage;
        _isMergingContent = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task CopyMergedContentToClipboardAsync()
    {
        if (string.IsNullOrEmpty(_mergedFileContentPlainText)) return;
        try { await JsRuntime.InvokeVoidAsync("blazorInterop.copyToClipboard", _mergedFileContentPlainText, "copyFeedback"); }
        catch (Exception ex)
        {
            Logger.LogError(ex, "JS interop for copyToClipboard failed.");
            try { await JsRuntime.InvokeVoidAsync("eval", "var el=document.getElementById('copyFeedback');if(el){el.innerText='Copy failed!';el.style.color='red';setTimeout(()=>{if(el)el.innerText='';},3000);}"); }
            catch (JSException evalEx) { Logger.LogError(evalEx, "Fallback JS for copy feedback failed."); }
        }
    }

    private async Task HandleSaveContextAsync(string newContextNameFromChild)
    {
        if (string.IsNullOrWhiteSpace(_currentDisplayRootPath) || string.IsNullOrWhiteSpace(newContextNameFromChild))
        {
            _contextStatusMessage = "Cannot save context: Root folder or name missing.";
            _contextStatusIsError = true;
            await InvokeAsync(StateHasChanged);
            return;
        }
        var actualSelectedFiles = _selectedFilePaths.Select(GetNodeByPath).Where(n => n is { IsDirectory: false }).Select(n => n!.FullPath).ToList();
        if (!actualSelectedFiles.Any())
        {
            _contextStatusMessage = "Cannot save context: No files are selected.";
            _contextStatusIsError = true;
            await InvokeAsync(StateHasChanged);
            return;
        }
        _appSettings ??= await SettingsService.GetAppSettingsAsync();
        var trimmedName = newContextNameFromChild.Trim();
        var existingContext = _appSettings.SavedContexts.FirstOrDefault(c => c.RootPath == _currentDisplayRootPath && c.Name == trimmedName);
        if (existingContext != null)
        {
            existingContext.SelectedFilePaths = new List<string>(actualSelectedFiles);
            _contextStatusMessage = $"Context '{trimmedName}' updated.";
        }
        else
        {
            _appSettings.SavedContexts.Add(new SavedContext { Name = trimmedName, RootPath = _currentDisplayRootPath, SelectedFilePaths = [..actualSelectedFiles] });
            _contextStatusMessage = $"Context '{trimmedName}' saved.";
        }
        _contextStatusIsError = false;
        await SettingsService.SaveAppSettingsAsync(_appSettings);
        if (_contextManagementPanelRef != null) _contextManagementPanelRef.NewContextName = ""; 
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleLoadContextFromPanelAsync(string contextNameToLoad)
    {
        if (string.IsNullOrEmpty(contextNameToLoad) || string.IsNullOrEmpty(_currentDisplayRootPath)) return;
        _appSettings ??= await SettingsService.GetAppSettingsAsync();
        var context = _appSettings.SavedContexts.FirstOrDefault(c => c.RootPath == _currentDisplayRootPath && c.Name == contextNameToLoad);
        if (context != null)
        {
            await ApplyContextAsync(context);
            _contextStatusMessage = $"Context '{context.Name}' loaded.";
            _contextStatusIsError = false;
        }
        else
        {
            _contextStatusMessage = $"Context '{contextNameToLoad}' not found.";
            _contextStatusIsError = true;
        }
        if (_contextManagementPanelRef != null) _contextManagementPanelRef.SelectedContextToLoadId = null;
        await InvokeAsync(StateHasChanged);
    }

    private async Task ApplyContextAsync(SavedContext contextToApply)
    {
        if (string.IsNullOrEmpty(contextToApply.RootPath))
        {
            _contextStatusMessage = "Error: Context has an invalid root path.";
            _contextStatusIsError = true;
            await InvokeAsync(StateHasChanged);
            return;
        }
        _isLoading = true;
        _loadingMessage = $"Loading context '{contextToApply.Name}'...";
        _contextStatusMessage = "";
        await InvokeAsync(StateHasChanged);
        if (contextToApply.RootPath != _currentDisplayRootPath)
        {
            _currentDisplayRootPath = contextToApply.RootPath;
            await LoadFileTreeAsync(_currentDisplayRootPath);
        }
        if ((_trueRootItems.Any() || DisplayRootItems.Any()) && contextToApply.SelectedFilePaths.Any())
        {
            await RestoreFileSelectionsAsync([..contextToApply.SelectedFilePaths]);
        }
        await GenerateMergedContentAsync();
        _isLoading = false;
        _loadingMessage = "";
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleDeleteContextAsync(string contextNameToDelete)
    {
        if (string.IsNullOrWhiteSpace(_currentDisplayRootPath) || string.IsNullOrWhiteSpace(contextNameToDelete)) return;
        _appSettings ??= await SettingsService.GetAppSettingsAsync();
        var contextToRemove = _appSettings.SavedContexts.FirstOrDefault(c => c.RootPath == _currentDisplayRootPath && c.Name == contextNameToDelete);
        if (contextToRemove != null)
        {
            _appSettings.SavedContexts.Remove(contextToRemove);
            await SettingsService.SaveAppSettingsAsync(_appSettings);
            _contextStatusMessage = $"Context '{contextNameToDelete}' deleted.";
            _contextStatusIsError = false;
            if (_contextManagementPanelRef != null && _contextManagementPanelRef.SelectedContextToLoadId == contextNameToDelete)
            {
                _contextManagementPanelRef.SelectedContextToLoadId = null;
            }
        }
        else
        {
            _contextStatusMessage = $"Context '{contextNameToDelete}' not found for current path.";
            _contextStatusIsError = true;
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleSearchInputAsync(ChangeEventArgs e)
    {
        _searchTerm = e.Value?.ToString() ?? "";
        _searchDebounceTimer?.Change(_searchDebounceTime, Timeout.InfiniteTimeSpan);
        _searchDebounceTimer ??= new Timer(async _ => await PerformSearchAsync(), null, _searchDebounceTime, Timeout.InfiniteTimeSpan);
    }
    
    private List<FileSystemItem> GetAllFileNodes(IEnumerable<FileSystemItem> items)
    {
        var allFiles = new List<FileSystemItem>();
        var queue = new Queue<FileSystemItem>(items);
        while (queue.Count > 0)
        {
            var item = queue.Dequeue();
            if (!item.IsDirectory) allFiles.Add(item);
            else foreach (var child in item.Children) queue.Enqueue(child);
        }
        return allFiles;
    }

    private async Task PerformSearchAsync()
    {
        if (_searchDebounceTimer != null) { await _searchDebounceTimer.DisposeAsync(); _searchDebounceTimer = null; }
        _isPerformingSearch = true;
        await InvokeAsync(StateHasChanged);
        if (string.IsNullOrWhiteSpace(_searchTerm) || _searchTerm.Length < 1) _searchResults.Clear();
        else if (_trueRootItems.Any() && !string.IsNullOrEmpty(_currentDisplayRootPath))
        {
            var allFileNodes = GetAllFileNodes(_trueRootItems);
            _searchResults = allFileNodes.Where(node => node.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)).OrderBy(node => node.FullPath).ToList();
        }
        else _searchResults.Clear();
        _isPerformingSearch = false;
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task HandleSearchResultSelectionAsync(Tuple<FileSystemItem, bool> args)
    {
        await HandleSearchResultSelectionChangedAsync(args.Item1, args.Item2);
    }

    private async Task HandleSearchResultSelectionChangedAsync(FileSystemItem searchResultItem, bool isSelected)
    {
        var originalNode = GetNodeByPath(searchResultItem.FullPath);
        if (originalNode != null)
        {
            originalNode.SetSelectionStatus(isSelected, _selectedFilePaths);
            originalNode.UpdateParentSelectionStatus(_selectedFilePaths);
            await HandleSelectionChangedAsync(originalNode); 
        }
        else { await InvokeAsync(StateHasChanged); } 
    }

    private async Task ClearSearchAsync()
    {
        _searchTerm = "";
        _searchResults.Clear();
        if (_searchDebounceTimer != null) { await _searchDebounceTimer.DisposeAsync(); _searchDebounceTimer = null; }
        _isPerformingSearch = false;
        await InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        NavStateService.SetPersistedState(_currentDisplayRootPath, _selectedFilePaths);
        await (_userPromptDebounceTimer?.DisposeAsync() ?? ValueTask.CompletedTask);
        _userPromptDebounceTimer = null;
        await (_searchDebounceTimer?.DisposeAsync() ?? ValueTask.CompletedTask);
        _searchDebounceTimer = null;
    }
}