<Project Sdk="Microsoft.NET.Sdk.Razor">

	<PropertyGroup>
		<OutputType>WinExe</OutputType>
		<TargetFramework>net9.0</TargetFramework>
		<ApplicationIcon>icon.ico</ApplicationIcon>
		<IncludeAllContentForSelfExtract>true</IncludeAllContentForSelfExtract>
		<ErrorOnDuplicatePublishOutputFiles>false</ErrorOnDuplicatePublishOutputFiles>
		<LangVersion>13</LangVersion>
		<Nullable>enable</Nullable>
		<!-- Version properties are now inherited from Directory.Build.props -->
	</PropertyGroup>

	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
		<Optimize>False</Optimize>
	</PropertyGroup>

	<ItemGroup Condition="$(RuntimeIdentifier.StartsWith('win'))">
		<RdXmlFile Include="rd.xml" />
		<RdXmlFile Include="Microsoft.AspNetCore.Components.Web.rd.xml" />
	</ItemGroup>

	<ItemGroup>
		<Content Update="wwwroot\**">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
		</Content>
		<Content Update="Shared\ProgressBar.razor.css">
		  <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
		</Content>
	</ItemGroup>

	<ItemGroup>
		<Content Include="icon.ico">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
		</Content>
		<None Update="favicon.ico">
			<CopyToOutputDirectory>Always</CopyToOutputDirectory>
		</None>
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="BlazorTablerIcons" Version="1.0.0" />
		<PackageReference Include="Microsoft.Extensions.Http" Version="9.0.0-preview.3.24172.9" /> <!-- Or the latest .NET 9 preview version -->
		<PackageReference Include="Photino.Blazor" Version="4.0.13" />
		<PackageReference Include="S97SP.Prism.Blazor" Version="1.0.3" />
		<PackageReference Include="Serilog" Version="4.3.0" />
		<PackageReference Include="Serilog.Extensions.Logging" Version="9.0.1" />
		<PackageReference Include="Serilog.Sinks.Console" Version="6.0.0" />
		<PackageReference Include="Serilog.Sinks.File" Version="7.0.0" />
		<PackageReference Include="Serilog.Enrichers.Thread" Version="4.0.0" />
	</ItemGroup>

	<!-- Add ProjectReference to FileCollector.Updater -->
	<ItemGroup>
		<ProjectReference Include="..\FileCollector.Updater\FileCollector.Updater.csproj">
			<ReferenceOutputAssembly>false</ReferenceOutputAssembly> <!-- We are not linking to it as a library -->
			<SkipGetTargetFrameworkProperties>true</SkipGetTargetFrameworkProperties> <!-- Avoids issues for SDK-style projects -->
			<Publish>false</Publish> <!-- Prevent main project from trying to publish the updater -->
			<PrivateAssets>all</PrivateAssets> <!-- Further prevent assets from flowing to the main project's publish -->
		</ProjectReference>
	</ItemGroup>

	<!-- Custom target to publish and copy updater files -->
	<Target Name="PublishAndCopyUpdaterFiles" AfterTargets="Publish">
		<PropertyGroup>
			<_UpdaterProjectFullPath>$(MSBuildProjectDirectory)\..\FileCollector.Updater\FileCollector.Updater.csproj</_UpdaterProjectFullPath>
			<_UpdaterIntermediatePublishDirBaseName>updater_publish_temp</_UpdaterIntermediatePublishDirBaseName>
			<_UpdaterIntermediatePublishDir>$(BaseIntermediateOutputPath)$(_UpdaterIntermediatePublishDirBaseName)\$([System.Guid]::NewGuid())</_UpdaterIntermediatePublishDir>
			<_PathToCopyFrom>$(_UpdaterIntermediatePublishDir)</_PathToCopyFrom>
		</PropertyGroup>

		<!-- Clean and ensure the intermediate directory exists -->
		<RemoveDir Directories="$(_PathToCopyFrom)" Condition="Exists('$(_PathToCopyFrom)')" />
		<MakeDir Directories="$(_PathToCopyFrom)" />

		<Message Text="Publishing FileCollector.Updater using dotnet publish to: $(_PathToCopyFrom) for final publish step" Importance="high" />
		<Exec Command='dotnet publish "$(_UpdaterProjectFullPath)" -c $(Configuration) -f $(TargetFramework) -r $(RuntimeIdentifier) -o "$(_PathToCopyFrom)" --self-contained true -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -p:PublishTrimmed=True -p:TrimMode=Link /p:DebugType=None /p:Version=$(Version) /p:InformationalVersion=$(InformationalVersion) /p:AssemblyVersion=$(AssemblyVersion) /p:FileVersion=$(FileVersion)' />

		<!-- Diagnostic: List files in the intermediate directory -->
		<Message Text="Listing files in intermediate updater publish directory (AfterTargets=Publish): $(_PathToCopyFrom)" Importance="high" />
		<ItemGroup>
			<_IntermediateUpdaterFiles Include="$(_PathToCopyFrom)\**\*.*" />
		</ItemGroup>
		<Message Text="File: %(_IntermediateUpdaterFiles.FullPath)" Importance="high" />
		<!-- End Diagnostic -->

		<ItemGroup>
			<!-- Collect all files from the updater's intermediate publish directory -->
			<_UpdaterFilesToCopy Include="@(_IntermediateUpdaterFiles)" />
		</ItemGroup>

		<Message Text="Number of updater files to copy (AfterTargets=Publish): @(_UpdaterFilesToCopy->Count())" Importance="high" />

		<!-- This copy to $(OutputPath) might be redundant if AfterTargets=Publish, but harmless.
		     The main goal is to ensure $(PublishDir) is correct. -->
		<Message Text="Copying FileCollector.Updater files to build output (AfterTargets=Publish): $(OutputPath)" Importance="high" Condition="'@(_UpdaterFilesToCopy->Count())' > '0'" />
		<Copy SourceFiles="@(_UpdaterFilesToCopy)"
			  DestinationFolder="$(OutputPath)\%(RecursiveDir)"
			  SkipUnchangedFiles="true"
			  Condition="'@(_UpdaterFilesToCopy->Count())' > '0'"/>

		<Message Text="Copying FileCollector.Updater files to FINAL publish output (AfterTargets=Publish): $(PublishDir)" Importance="high" Condition=" '$(PublishDir)' != '' And '@(_UpdaterFilesToCopy->Count())' > '0'" />
		<Copy SourceFiles="@(_UpdaterFilesToCopy)"
			  DestinationFolder="$(PublishDir)\%(RecursiveDir)"
			  SkipUnchangedFiles="false"
			  OverwriteReadOnlyFiles="true"
			  Condition=" '$(PublishDir)' != '' And '@(_UpdaterFilesToCopy->Count())' > '0'" />

		<RemoveDir Directories="$(_PathToCopyFrom)" Condition="Exists('$(_PathToCopyFrom)')" />
	</Target>

</Project>