@inject UpdateStateService UpdateStateSvc
@inject UpdateService UpdateSvc
@implements IAsyncDisposable

@if (_showModal)
{
    <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5);" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @if (UpdateStateSvc.CurrentState == UpdateProcessState.UpdateAvailable)
                        {
                            <TablerIcon OutlineIcon="TablerIconOutlineName.Download" Class="me-2" /> <span>Update Available</span>
                        }
                        else if (UpdateStateSvc.CurrentState == UpdateProcessState.Error)
                        {
                            <TablerIcon OutlineIcon="TablerIconOutlineName.AlertTriangle" Class="me-2" /> <span>Update Error</span>
                        }
                        else
                        {
                            <TablerIcon OutlineIcon="TablerIconOutlineName.InfoCircle" Class="me-2" /> <span>Application Update</span>
                        }
                    </h5>
                    @if (CanCloseModal())
                    {
                        <button type="button" class="btn-close" @onclick="HandleDismissClicked" aria-label="Close"></button>
                    }
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrWhiteSpace(UpdateStateSvc.StatusMessage))
                    {
                        <p>@UpdateStateSvc.StatusMessage</p>
                    }

                    @if (UpdateStateSvc.CurrentState == UpdateProcessState.UpdateAvailable && UpdateStateSvc.AvailableUpdateInfo != null)
                    {
                        <p class="mt-1 mb-2"><small>You are currently on version: @(_currentAppVersion)</small></p>
                        
                        <h6>Release Details:</h6>
                        <ul class="list-unstyled small ms-2 mb-2">
                            <li><strong>Name:</strong> @UpdateStateSvc.AvailableUpdateInfo.Name</li>
                            <li><strong>Published:</strong> @UpdateStateSvc.AvailableUpdateInfo.PublishedAt.ToString("g")</li>
                        </ul>

                        @if (!string.IsNullOrWhiteSpace(UpdateStateSvc.AvailableUpdateInfo.Body))
                        {
                            <h6>Release Notes:</h6>
                            <div class="release-notes scrollable-area-sm" style="max-height: 150px; background-color: #f8f9fa; padding: 10px; border-radius: 4px; border: 1px solid #dee2e6;">
                                <pre style="white-space: pre-wrap; font-size: 0.8em;">@UpdateStateSvc.AvailableUpdateInfo.Body</pre>
                            </div>
                        }
                    }
                    else if (UpdateStateSvc.CurrentState != UpdateProcessState.UpdateAvailable && string.IsNullOrWhiteSpace(UpdateStateSvc.StatusMessage))
                    {
                        <p>Processing update status...</p>
                    }

                    @if (UpdateStateSvc.CurrentState == UpdateProcessState.Downloading || UpdateStateSvc.CurrentState == UpdateProcessState.Extracting)
                    {
                        <div class="progress mt-3">
                            <div class="progress-bar @(UpdateStateSvc.CurrentState == UpdateProcessState.Error ? "bg-danger" : "progress-bar-striped progress-bar-animated")"
                                 role="progressbar" style="width: @UpdateStateSvc.Progress%;"
                                 aria-valuenow="@UpdateStateSvc.Progress" aria-valuemin="0" aria-valuemax="100">
                                @(UpdateStateSvc.Progress.ToString("F0"))%
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    @if (UpdateStateSvc.CurrentState == UpdateProcessState.UpdateAvailable)
                    {
                        <button type="button" class="btn btn-light" @onclick="HandleLaterClicked">Later</button>
                        <button type="button" class="btn btn-primary" @onclick="StartUpdateProcessAsync">
                            <TablerIcon OutlineIcon="TablerIconOutlineName.Download" Class="me-1" /> Update and Restart
                        </button>
                    }
                    else if (UpdateStateSvc.CurrentState == UpdateProcessState.ReadyToApply && UpdateStateSvc.StatusMessage != null && UpdateStateSvc.StatusMessage.Contains("Updater launched"))
                    {
                         <button type="button" class="btn btn-primary" disabled>Closing...</button>
                    }
                    else if (CanCloseModal()) // For Error, Idle (after manual check), etc.
                    {
                        <button type="button" class="btn btn-primary" @onclick="HandleOkClicked">OK</button>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool _isCheckingManually = false;
    private bool _forceShowAfterUserCheck = false; // True if manual check initiated, to show "up to date" or error
    private string _currentAppVersion = "N/A";
    private bool _showModal = false; // New state variable to control modal visibility directly

    protected override async Task OnInitializedAsync()
    {
        UpdateStateSvc.OnUpdateStateChangedAsync += HandleUpdateStateChangedAsync;
        _currentAppVersion = System.Reflection.Assembly.GetEntryAssembly()?.GetName().Version?.ToString() ?? "N/A";
        UpdateModalVisibility(); // Initial check

        var appSettings = await UpdateSvc._settingsService.GetAppSettingsAsync();
        if (appSettings.Update.CheckForUpdatesOnStartup)
        {
            _ = UpdateSvc.CheckForUpdatesAsync();
        }
    }

    private async Task HandleUpdateStateChangedAsync()
    {
        UpdateModalVisibility();
        await InvokeAsync(StateHasChanged);
    }

    private void UpdateModalVisibility()
    {
        // Determine if the modal should be shown
        if (UpdateStateSvc.CurrentState == UpdateProcessState.Idle)
        {
            _showModal = _forceShowAfterUserCheck; // Show if manual check just finished (e.g. "up to date")
        }
        else
        {
            // Show for any other non-idle state (UpdateAvailable, Downloading, Error, etc.)
            _showModal = true;
        }
    }

    private bool CanCloseModal()
    {
        return UpdateStateSvc.CurrentState switch
        {
            UpdateProcessState.Downloading => false,
            UpdateProcessState.Extracting => false,
            UpdateProcessState.Applying => false,
            _ => true,
        };
    }
    
    private void HandleDismissClicked() // For the 'X' button
    {
        if (!CanCloseModal()) return;

        if (UpdateStateSvc.CurrentState == UpdateProcessState.UpdateAvailable)
        {
            // If user dismisses "UpdateAvailable" with X, treat it like "Later"
            // The state remains UpdateAvailable, but modal hides. It will reappear if state changes.
            _showModal = false;
        }
        else // For Error, Idle (after manual check)
        {
            UpdateStateSvc.ResetState(); // Reset state fully
            _forceShowAfterUserCheck = false;
            _isCheckingManually = false;
            _showModal = false;
        }
        StateHasChanged();
    }

    private void HandleLaterClicked() // For "Later" button on UpdateAvailable
    {
        // State remains UpdateAvailable, but modal hides.
        // It will reappear if state changes or if app restarts and checks again.
        _showModal = false;
        _forceShowAfterUserCheck = false; // No longer forcing show for this interaction
        _isCheckingManually = false;
        StateHasChanged();
    }
    
    private void HandleOkClicked() // For "OK" button on Error, Idle (after manual check)
    {
        UpdateStateSvc.ResetState(); // Reset state fully
        _forceShowAfterUserCheck = false;
        _isCheckingManually = false;
        _showModal = false;
        StateHasChanged();
    }

    private async Task StartUpdateProcessAsync()
    {
        _isCheckingManually = false;
        _forceShowAfterUserCheck = false;
        // _showModal will be updated by HandleUpdateStateChangedAsync when state changes to Downloading etc.
        await UpdateSvc.DownloadAndApplyUpdateAsync();
    }

    public async Task CheckForUpdatesManuallyAsync()
    {
        _isCheckingManually = true;
        _forceShowAfterUserCheck = true; // Ensure modal shows for manual check result
        // _showModal will be updated by HandleUpdateStateChangedAsync
        await UpdateSvc.CheckForUpdatesAsync(initiatedByUser: true);
    }

    public async ValueTask DisposeAsync()
    {
        UpdateStateSvc.OnUpdateStateChangedAsync -= HandleUpdateStateChangedAsync;
        await Task.CompletedTask;
    }
}