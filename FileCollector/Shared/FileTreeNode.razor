
<div class="file-tree-node" style="@($"padding-left: {Level * IndentationSizePx}px;")">
    <div class="node-content d-flex align-items-center">
        @if (Node.IsDirectory)
        {
            <span @onclick="ToggleExpand"
                  class="node-expander"
                  style="cursor: pointer; width: @(ExpanderWidthPx)px; display: inline-block; text-align:center;">
                @if (Node.Children.Any())
                {
                    <TablerIcon
                        OutlineIcon="@(Node.IsExpanded ? TablerIconOutlineName.ChevronDown : TablerIconOutlineName.ChevronRight)"
                        Size="16px"/>
                }
                else
                {
                    <span style="width: 16px; display: inline-block;"></span>
                }
            </span>
        }
        else
        {
            <span class="node-expander" style="width: @(ExpanderWidthPx)px; display: inline-block;"></span>
        }

        <input type="checkbox" class="form-check-input mx-1" 
               checked="@Node.IsSelected"
               @onchange="HandleCheckboxChange"/>

        <span @onclick="HandleContentClick"
              style="@(Node.IsDirectory ? "cursor: pointer;" : "cursor: default;")"
              class="node-label"
              title="@Node.FullPath">
            <TablerIcon OutlineIcon="@IconHelper.GetIconForItem(Node.Name, Node.IsDirectory, Node.IsExpanded)"
                        Color="@(Node.IsDirectory ? "var(--app-primary-color)" : "var(--sidebar-nav-link-color)")" 
                        Class="me-1" 
                        Size="18px"/>
            @Node.Name
        </span>
    </div>
</div>

@if (Node is { IsDirectory: true, IsExpanded: true } && Node.Children.Any())
{
    @foreach (var childNode in Node.Children.OrderBy(c => !c.IsDirectory).ThenBy(c => c.Name))
    {
        <FileTreeNode Node="childNode"
                      SelectedFilePaths="SelectedFilePaths"
                      OnSelectionChanged="OnSelectionChanged"
                      Level="Level + 1"/>
    }
}

@code
{
    [Parameter] public FileSystemItem Node { get; set; } = null!;
    [Parameter] public List<string> SelectedFilePaths { get; set; } = [];
    [Parameter] public EventCallback<FileSystemItem> OnSelectionChanged { get; set; }
    [Parameter] public int Level { get; set; }

    private const int IndentationSizePx = 20; // Defines the indent per level
    private const int ExpanderWidthPx = 20;   // Width for the expander icon area

    private void ToggleExpand()
    {
        if (Node.IsDirectory)
        {
            Node.IsExpanded = !Node.IsExpanded;
            // StateHasChanged(); // Usually not needed if Node.IsExpanded is used in the template directly for conditional rendering
        }
    }

    private async Task HandleCheckboxChange(ChangeEventArgs e)
    {
        if (e.Value is bool isChecked)
        {
            // Ensure Node.IsSelected is updated before calling SetSelectionStatus
            // if SetSelectionStatus relies on the new value of Node.IsSelected internally.
            // However, SetSelectionStatus takes `isChecked` as an argument, so it's fine.
            Node.SetSelectionStatus(isChecked, SelectedFilePaths); // This updates Node.IsSelected and children
            Node.UpdateParentSelectionStatus(SelectedFilePaths);
            await OnSelectionChanged.InvokeAsync(Node); // Notify parent of the change
        }
    }

    private void HandleContentClick()
    {
        if (Node.IsDirectory)
        {
            ToggleExpand();
        }
    }
}