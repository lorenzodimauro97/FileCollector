<div class="file-tree-node" style="@($"padding-left: {Level * IndentationSizePx}px;")">
    <div class="node-content">
        @if (Node.IsDirectory)
        {
            <span @onclick="ToggleExpand" class="node-expander">
                @if (Node.Children.Any())
                {
                    <TablerIcon
                        OutlineIcon="@(Node.IsExpanded ? TablerIconOutlineName.ChevronDown : TablerIconOutlineName.ChevronRight)"
                        Size="16px"/>
                }
                else
                {
                    <span class="node-expander-placeholder"></span>
                }
            </span>
        }
        else
        {
            <span class="node-expander-placeholder"></span>
        }
        <input type="checkbox" class="form-check-input node-checkbox"
               checked="@Node.IsSelected"
               @onchange="HandleCheckboxChange"/>

        <span @onclick="HandleContentClick"
              class="node-label"
              title="@Node.FullPath">
            <TablerIcon OutlineIcon="@IconHelper.GetIconForItem(Node.Name, Node.IsDirectory, Node.IsExpanded)"
                        Color="@(Node.IsDirectory ? "var(--app-primary-color)" : "var(--text-color)")"
                        Class="me-1 node-icon"
                        Size="18px"
                        StrokeWidth="1.5f"/>
            @Node.Name
        </span>
    </div>
</div>

@if (Node is { IsDirectory: true, IsExpanded: true } && Node.Children.Any())
{
    @foreach (var childNode in Node.Children.OrderBy(c => !c.IsDirectory).ThenBy(c => c.Name))
    {
        <FileTreeNode Node="childNode"
                      SelectedFilePaths="SelectedFilePaths"
                      OnSelectionChanged="OnSelectionChanged"
                      Level="Level + 1"/>
    }
}

@code
{
    [Parameter] public FileSystemItem Node { get; set; } = null!;
    [Parameter] public List<string> SelectedFilePaths { get; set; } = [];
    [Parameter] public EventCallback<FileSystemItem> OnSelectionChanged { get; set; }
    [Parameter] public int Level { get; set; }

    private const int IndentationSizePx = 18;
    private const int ExpanderWidthPx = 18;

    private void ToggleExpand()
    {
        if (Node.IsDirectory)
        {
            Node.IsExpanded = !Node.IsExpanded;
        }
    }

    private async Task HandleCheckboxChange(ChangeEventArgs e)
    {
        if (e.Value is bool isChecked)
        {
            Node.SetSelectionStatus(isChecked, SelectedFilePaths);
            Node.UpdateParentSelectionStatus(SelectedFilePaths);
            await OnSelectionChanged.InvokeAsync(Node);
        }
    }

    private void HandleContentClick()
    {
        if (Node.IsDirectory)
        {
            ToggleExpand();
        }
    }
}