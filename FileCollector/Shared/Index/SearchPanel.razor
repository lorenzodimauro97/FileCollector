<div class="input-group input-group-sm mb-2">
    <input type="text" class="form-control form-control-sm" placeholder="Search files and folders..."
           value="@SearchTerm" @oninput="OnSearchInput"
           disabled="@(IsLoadingOrLoadingTree || string.IsNullOrEmpty(CurrentDisplayRootPath))"/>
    @if (!string.IsNullOrEmpty(SearchTerm))
    {
        <button class="btn btn-light" @onclick="OnClearSearch" title="Clear search"
                disabled="@IsLoadingOrLoadingTree">
            <TablerIcon OutlineIcon="@TablerIconOutlineName.X" Size="16px"/>
        </button>
    }
</div>

@if (IsPerformingSearch)
{
    <p class="text-muted small"><em>Searching...</em></p>
}
else if (!string.IsNullOrEmpty(SearchTerm) && !SearchResults.Any())
{
    <p class="text-muted small"><em>No items found matching "@SearchTerm.Shorten(30)".</em></p>
}
else if (SearchResults.Any())
{
    <div class="search-results-list scrollable-area-sm list-group" style="max-height: 25vh;">
        @foreach (var node in SearchResults)
        {
            <div class="list-group-item list-group-item-action py-2 px-2">
                <div class="d-flex align-items-start">
                    <input type="checkbox" class="form-check-input me-2 mt-1" style="flex-shrink: 0;"
                           checked="@node.IsSelected"
                           @onchange="async (ChangeEventArgs e) => await HandleSearchResultSelectionChanged(node, (bool)e.Value!)"/>
                    
                    <div class="flex-grow-1" style="min-width: 0;">
                        <div class="d-flex align-items-center">
                            @{
                                var (icon, color) = IconHelper.GetIconForItem(node.Name, node.IsDirectory, false);
                            }
                            <TablerIcon
                                OutlineIcon="@icon"
                                Color="@color"
                                Size="18px"
                                Class="me-2 flex-shrink-0"/>
                            <span class="text-truncate fw-normal" title="@node.FullPath">@node.Name</span>
                        </div>
                        
                        @{
                            var relativePath = node.FullPath;
                            if (!string.IsNullOrEmpty(CurrentDisplayRootPath) && node.FullPath.StartsWith(CurrentDisplayRootPath, StringComparison.OrdinalIgnoreCase))
                            {
                                relativePath = Path.GetRelativePath(CurrentDisplayRootPath, node.FullPath);
                                if (string.IsNullOrEmpty(relativePath) || relativePath == ".")
                                {
                                    relativePath = node.Name;
                                }
                            }
                        }
                        <div class="small text-muted text-truncate mt-1" title="@node.FullPath">
                            @relativePath
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}
else if (!string.IsNullOrEmpty(SearchTerm) && string.IsNullOrEmpty(CurrentDisplayRootPath))
{
    <p class="text-muted small"><em>Please select a root folder to search.</em></p>
}
else if (!string.IsNullOrEmpty(SearchTerm) && !HasTrueRootItems && !string.IsNullOrEmpty(CurrentDisplayRootPath))
{
    <p class="text-muted small"><em>No files loaded to search in the current folder.</em></p>
}

@code {
    [Parameter] public string SearchTerm { get; set; } = "";
    [Parameter] public bool IsLoadingOrLoadingTree { get; set; }
    [Parameter] public string? CurrentDisplayRootPath { get; set; }
    [Parameter] public bool IsPerformingSearch { get; set; }
    [Parameter] public List<FileSystemItem> SearchResults { get; set; } = [];
    [Parameter] public bool HasTrueRootItems { get; set; }


    [Parameter] public EventCallback<ChangeEventArgs> OnSearchInput { get; set; }
    [Parameter] public EventCallback OnClearSearch { get; set; }
    [Parameter] public EventCallback<Tuple<FileSystemItem, bool>> OnSearchResultSelectionChanged { get; set; }

    private async Task HandleSearchResultSelectionChanged(FileSystemItem item, bool isSelected)
    {
        await OnSearchResultSelectionChanged.InvokeAsync(Tuple.Create(item, isSelected));
    }
}