<div class="d-flex justify-content-between align-items-center mb-3">
    <h4 class="panel-title mb-0">
        Merged Content
        @if (IsMergingContent)
        {
            <span class="spinner-border spinner-border-sm ms-2" role="status"
                  aria-hidden="true"></span>
        }
        <span class="ms-2 small text-muted">~@MergedContentTokenCount tokens</span>
    </h4>
    <div class="d-flex align-items-center">
        <button class="btn btn-light me-2" @onclick="OnGenerateMergedContentClicked"
                disabled="@(IsMergingContent || !CanGenerateOrCopy)">
            <TablerIcon OutlineIcon="@TablerIconOutlineName.Refresh" Class="me-1" Size="16px"/>
            Refresh
        </button>
        <button class="btn btn-primary" @onclick="OnCopyMergedContentToClipboardClicked"
                disabled="@(IsMergingContent || !CanGenerateOrCopy)">
            <TablerIcon OutlineIcon="@TablerIconOutlineName.Clipboard" Class="me-1" Size="16px"/>
            Copy
        </button>
        <span id="copyFeedback" class="ms-2 small text-success"></span>
    </div>
</div>

@if (!string.IsNullOrEmpty(MergeErrorMessage))
{
    <div class="alert alert-danger small py-1 px-2">@MergeErrorMessage</div>
}

<div class="mb-3">
    <label for="userPrompt" class="form-label">User Prompt:</label>
    <div class="input-group">
        <textarea id="userPrompt" class="form-control" rows="3"
                  @bind="BoundUserPromptValue" @bind:event="oninput"
                  placeholder="Enter any specific instructions or questions here..."></textarea>
        <button class="btn btn-light" type="button" @onclick="OnClearUserPromptClicked"
                title="Clear User Prompt">
            <TablerIcon OutlineIcon="@TablerIconOutlineName.ClearAll" Size="16px"/>
        </button>
    </div>
    <div class="form-text">
        This prompt is not saved. It appears after files and before the Post-Prompt.
        @if (IsAutoRefreshEnabled)
        {
            <span>Refreshes automatically after you stop typing.</span>
        }
        else
        {
            <span>Auto-refresh is off; click "Refresh" to update content.</span>
        }
    </div>
</div>

<div class="d-flex flex-wrap gap-3 align-items-end mb-3">
    <div class="flex-grow-1">
        <label for="prePromptSelect" class="form-label small mb-1">Pre-Prompt</label>
        <select id="prePromptSelect" class="form-select form-select-sm"
                value="@SelectedPrePromptId"
                @onchange="HandleSelectedPrePromptChanged"
                disabled="@(IsMergingContent || AppSettings?.PrePrompts.Count == 0)">
            <option value="@Guid.Empty">None</option>
            @if (AppSettings?.PrePrompts != null)
            {
                @foreach (var prompt in AppSettings.PrePrompts)
                {
                    <option value="@prompt.Id">@prompt.Name</option>
                }
            }
        </select>
    </div>

    <div class="flex-grow-1">
        <label for="postPromptSelect" class="form-label small mb-1">Post-Prompt</label>
        <select id="postPromptSelect" class="form-select form-select-sm"
                value="@SelectedPostPromptId"
                @onchange="HandleSelectedPostPromptChanged"
                disabled="@(IsMergingContent || AppSettings?.PostPrompts.Count == 0)">
            <option value="@Guid.Empty">None</option>
            @if (AppSettings?.PostPrompts != null)
            {
                @foreach (var prompt in AppSettings.PostPrompts)
                {
                    <option value="@prompt.Id">@prompt.Name</option>
                }
            }
        </select>
    </div>

    <div class="form-check">
        <input class="form-check-input" type="checkbox" id="includeFileTreeCheckbox"
               checked="@IncludeFileTreeInOutput"
               @onchange="HandleIncludeFileTreeChanged"
               disabled="@(IsMergingContent || string.IsNullOrEmpty(CurrentDisplayRootPath))">
        <label class="form-check-label small" for="includeFileTreeCheckbox">
            Include file/folder tree
        </label>
    </div>

    <div class="form-check">
        <input class="form-check-input" type="checkbox" id="privatizeDataCheckboxOutput"
               checked="@PrivatizeDataInOutput"
               @onchange="HandlePrivatizeDataChanged"
               disabled="@IsMergingContent">
        <label class="form-check-label small" for="privatizeDataCheckboxOutput">
            Privatize Data
        </label>
    </div>

    <div class="form-check form-switch">
        <input class="form-check-input" type="checkbox" id="autoRefreshSwitch"
               checked="@IsAutoRefreshEnabled"
               @onchange="HandleAutoRefreshChanged"
               role="switch"
               disabled="@IsMergingContent">
        <label class="form-check-label small" for="autoRefreshSwitch">
            Auto-refresh
        </label>
    </div>
</div>

@code {
    [Parameter] public bool IsMergingContent { get; set; }
    [Parameter] public int MergedContentTokenCount { get; set; }
    [Parameter] public bool CanGenerateOrCopy { get; set; }
    [Parameter] public string MergeErrorMessage { get; set; } = "";
    [Parameter] public string UserPromptValue { get; set; } = "";
    [Parameter] public EventCallback<string> UserPromptValueChanged { get; set; }
    [Parameter] public bool IncludeFileTreeInOutput { get; set; }
    [Parameter] public bool PrivatizeDataInOutput { get; set; }
    [Parameter] public Guid? SelectedPrePromptId { get; set; }
    [Parameter] public Guid? SelectedPostPromptId { get; set; }
    [Parameter] public AppSettings? AppSettings { get; set; }
    [Parameter] public string? CurrentDisplayRootPath { get; set; }
    [Parameter] public bool IsAutoRefreshEnabled { get; set; }

    [Parameter] public EventCallback OnGenerateMergedContentClicked { get; set; }
    [Parameter] public EventCallback OnCopyMergedContentToClipboardClicked { get; set; }
    [Parameter] public EventCallback OnClearUserPromptClicked { get; set; }
    [Parameter] public EventCallback<bool> OnIncludeFileTreeInOutputChanged { get; set; }
    [Parameter] public EventCallback<bool> OnPrivatizeDataInOutputChanged { get; set; }
    [Parameter] public EventCallback<Guid?> OnSelectedPrePromptIdChanged { get; set; }
    [Parameter] public EventCallback<Guid?> OnSelectedPostPromptIdChanged { get; set; }
    [Parameter] public EventCallback<bool> OnAutoRefreshEnabledChanged { get; set; }

    private string BoundUserPromptValue
    {
        get => UserPromptValue;
        set
        {
            if (UserPromptValue != value)
            {
                UserPromptValueChanged.InvokeAsync(value);
            }
        }
    }

    private async Task HandleIncludeFileTreeChanged(ChangeEventArgs e)
    {
        if (e.Value is bool val)
        {
            await OnIncludeFileTreeInOutputChanged.InvokeAsync(val);
        }
    }

    private async Task HandlePrivatizeDataChanged(ChangeEventArgs e)
    {
        if (e.Value is bool val)
        {
            await OnPrivatizeDataInOutputChanged.InvokeAsync(val);
        }
    }
    
    private async Task HandleSelectedPrePromptChanged(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value?.ToString(), out var guid))
        {
            await OnSelectedPrePromptIdChanged.InvokeAsync(guid == Guid.Empty ? null : guid);
        }
    }
    
    private async Task HandleSelectedPostPromptChanged(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value?.ToString(), out var guid))
        {
            await OnSelectedPostPromptIdChanged.InvokeAsync(guid == Guid.Empty ? null : guid);
        }
    }

    private async Task HandleAutoRefreshChanged(ChangeEventArgs e)
    {
        if (e.Value is bool val)
        {
            await OnAutoRefreshEnabledChanged.InvokeAsync(val);
        }
    }
}